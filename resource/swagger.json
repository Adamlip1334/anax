{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "The Agent Secrets APIs enables service containers to receive updated secrets",
    "title": "Agent Secrets API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/api/v1/secrets": {
      "get": {
        "description": "Get the list of updated secrets.",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "tags": [
          "Secrets"
        ],
        "summary": "Get secrets.",
        "operationId": "handleGetSecrets",
        "responses": {
          "200": {
            "description": "Secrets response",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "404": {
            "description": "No updated secrets found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed to retrieve the secret names of updated secrets",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/secrets/{secretName}": {
      "get": {
        "description": "Get the details of a secret.",
        "produces": [
          "application/json",
          "text/plain"
        ],
        "tags": [
          "Secrets"
        ],
        "summary": "Get a secret.",
        "operationId": "handleGetSecret",
        "parameters": [
          {
            "type": "string",
            "description": "The secret name of the secret object to return",
            "name": "secretName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Secret response",
            "schema": {
              "$ref": "#/definitions/secretObject"
            }
          },
          "400": {
            "description": "Secret name not specified",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Secret not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed to retrieve the secret",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/v1/secrets/{secretName}?received=true": {
      "post": {
        "description": "Mark the secret as having been received by the service.\nAfter the secret is marked as received, it will no longer be returned by GET /secrets again.",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "Secrets"
        ],
        "summary": "Mark a secret as received.",
        "operationId": "handleSecretReceived",
        "parameters": [
          {
            "type": "string",
            "description": "The secret name of the secret to mark as received",
            "name": "secretName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Secret marked as received",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Secret name not specified",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "Secret not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Failed to mark the object consumed",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "secretObject": {
      "description": "The details are a JSON document containing {\"key\":\"\u003ckey\u003e\", \"value\": \"\u003cvalue\u003e\"} that has been marshalled into a string and then base64 encoded.",
      "type": "object",
      "title": "secretObject includes the secret details.",
      "properties": {
        "details": {
          "type": "string",
          "x-go-name": "Details"
        }
      },
      "x-go-package": "github.com/open-horizon/anax/resource"
    }
  }
}